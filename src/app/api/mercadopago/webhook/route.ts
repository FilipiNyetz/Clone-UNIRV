// src/app/api/mercadopago/webhook/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { MercadoPagoConfig, Payment } from 'mercadopago';

// Configura√ß√£o do cliente Mercado Pago
const client = new MercadoPagoConfig({
    accessToken: process.env.ACESSO_TOKEN!, // Certifique-se de definir essa vari√°vel no ambiente do servidor
    options: { timeout: 5000 },
});

const payment = new Payment(client);

// Fun√ß√£o que lida com notifica√ß√µes do Mercado Pago
export async function POST(req: NextRequest) {
    try {
        const body = await req.json();

        console.log('üîî Notifica√ß√£o recebida do Mercado Pago:', body);

        const paymentId = body?.data?.id;
        if (!paymentId) {
            console.warn('‚ö†Ô∏è ID de pagamento ausente na notifica√ß√£o');
            return NextResponse.json({ error: 'ID de pagamento n√£o encontrado' }, { status: 400 });
        }

        // Recupera os dados detalhados do pagamento pelo ID
        const paymentData = await payment.get({ id: paymentId });
        const status = paymentData.status;
        const email = paymentData.payer?.email;

        // Aqui voc√™ pode salvar ou atualizar dados no seu banco de dados
        if (status === 'approved') {
            console.log(`‚úÖ Pagamento aprovado para ${email} (ID: ${paymentId})`);
            // Ex: await atualizarStatusPagamento(paymentId, 'aprovado');
        } else {
            console.log(`‚ÑπÔ∏è Status do pagamento ${paymentId}: ${status}`);
        }

        return NextResponse.json({ success: true });
    } catch (error) {
        console.error('‚ùå Erro no processamento do webhook:', error);
        return new NextResponse('Erro interno no servidor', { status: 500 });
    }
}

// Rejeita outros m√©todos HTTP
export function GET() {
    return new NextResponse('M√©todo n√£o permitido', { status: 405 });
}
